[FAQ13232]L 预置apk
 
一、如何将带源码的APK预置进系统？

1)  在 packages/apps 下面以需要预置的 APK的 名字创建一个新文件夹，以预置一个名为Test的APK 为例
2)  将 Test APK的Source code 拷贝到 Test 文件夹下，删除 /bin 和 /gen 目录
3)  在 Test 目录下创建一个名为 Android.mk的文件，内容如下：
		LOCAL_PATH:= $(call my-dir)
		include $(CLEAR_VARS)
 
		LOCAL_MODULE_TAGS := optional
		LOCAL_SRC_FILES := $(call all-subdir-java-files)
 
		LOCAL_PACKAGE_NAME := Test
		include $(BUILD_PACKAGE)

 
二、如何将无源码的 APK 预置进系统？

基本格式如下
		LOCAL_PATH := $(call my-dir)
		include $(CLEAR_VARS)
		LOCAL_MODULE := Test
		LOCAL_MODULE_TAGS := optional
		LOCAL_BUILT_MODULE_STEM := package.apk
		LOCAL_MODULE_SUFFIX := $(COMMON_ANDROID_PACKAGE_SUFFIX)
		
		LOCAL_CERTIFICATE := PRESIGNED
		LOCAL_SRC_FILES := $(LOCAL_MODULE).apk
		
		？？？？？？？？？？？？？？？？？？？？？？？？
		
		include $(BUILD_PREBUILT)


A，多种格式lib包，是否编译 odex 文件；编译odex 文件开机速度会有所加快
		Test.apk 文件中有多种lib包格式：
		lib\armeabi
		lib\armeabi-v7a
		lib\x86
		-----------------------------------------
		LOCAL_DEX_PREOPT := false（不编译odex文件--或者这里有直接指定一种lib包，如下）
		

		Test.apk 文件中只有一种lib包格式：
		lib\armeabi
		-------------------------------------
		LOCAL_PREBUILT_JNI_LIBS:= \
  			lib/armeabi/libDBMFnativeU.so
		LOCAL_DEX_PREOPT := true（编译odex文件，并内置lib包）
		
		
1，内置到system/app目录下
		LOCAL_MODULE_CLASS := APPS


2，内置到system/priv-app目录下
		LOCAL_MODULE_CLASS := APPS		
		LOCAL_PRIVILEGED_MODULE :=true


3，内置到可卸载，并恢复出厂设置不能恢复system/data/app
		LOCAL_MODULE_CLASS := APPS
		LOCAL_MODULE_PATH := $(TARGET_OUT_DATA_APPS)

		
4，内置到可卸载，并恢复出厂设置能恢复system/vendor/operator
		LOCAL_MODULE_CLASS := APPS
		LOCAL_MODULE_PATH := $(TARGET_OUT)/vendor/operator/app


5，若需要apk作为32bit的apk运行，则需要在Android.mk中定义
		LOCAL_MULTILIB :=32
		
6，特殊情况，有的app内置后还是无法使用，建议用 直接copy 的方式，
 		有跟 开关机动画一样的方式		
 		有跟 可以在 device.mk 里面添加脚本的方式
		
		
7，32位 还是 64位 lib包
在Android.mk中设定LOCAL_MULTILIB :=32，则预编译时会提取该apk的32bit的odex

一台手机，有时需要判断kernel是32位还是64位。
简单的方法是查看是否存在/system/lib64目录，可以通过adb shell ls /system/lib64看是否可以看到。		



预置应用时编译报错，但是应用直接安装正常
解决办法：这种情况可能是此应用在别的平台签名过了，导致与系统不兼容，所以编译不通过， 故需要将此应用在当前代码环境中重新签名一下，方法如下：
1）用压缩软件打开apk文件，删掉META-INF目录下的CERT.SF和CERT.RSA两个文件。
2.）使用目标系统的platform密钥来重新给apk文件签名。
2.1密钥文件，在代码目录中的位置是build\target\product\security下面的platform.pk8和platform.x509.pem两个文件。
2.2 用系统提供的Signapk工具来签名，signapk的源代码是在"build\tools\signapk"下，在out\host\linux-x86\framework目录下获取生成的signapk.jar
3）用法为"java - jar signapk.jar platform.x509.pem platform.pk8 xxxx.apk
outxxxx.apk"，文件名最好使用绝对路径防止找不到。


device.mk
WITH_DEXPREOPT_PIC 是控制 art 对 apk文件编译处理方式的编译控制选项，其使用前提是WITH_DEXPREOPT=true 。 
WITH_DEXPREOPT_PIC  = true 时，第一次开机时不会再执行patchoat生成oat文件到/data/dalvik-cache/目录中，
可以解决/data区空间并缩短第一次开机时间，但会稍微影响运行时速度。 
下面是本地测试的结果（根据应用的多少结果会不同）： 
开启PIC后会有如下的影响： 
1. art跑分降低了2.2% (1940---->1897) 
2. 下载后/恢复出厂设置后 开机快了200% （150s---->56s） 
3. data分区占用减少了450M(GMS最小包，如果是整包或者内置更多应用并开启odex，则会省更多) 
这样修改之后既可以减小data分区的空间，又可以加快开机速度，但风险就是容易被hack利用固定映射地址进行攻击
矛盾？？？？？？？？？？？？？？？？ 
        
优化第一次开机速度
\alps\device\bestone\best6580_weg_m_s509\device.mk注释下面两行代码
ifeq ($(TARGET_BUILD_VARIANT),user)
WITH_DEXPREOPT := true
#DONT_DEXPREOPT_PREBUILTS := true
#WITH_DEXPREOPT_PIC := true
endif
以及风险优化
https://onlinesso.mediatek.com/Pages/FAQ.aspx?List=SW&FAQID=FAQ14132       




[FAQ14102]L版本开机提示“Android正在升级或启动”
[DESCRIPTION]
 
 [导致该现象出现的可能]：
1, L版本上预置apk不正确，导致32位与64位兼容性问题
2, 如果您有重新push，再开机就会因为odex是旧的，导致重新提取。
3, 安装APK或开机过程中掉电
4, L1上设置关机闹钟，闹钟响起时择暂停，按Power键开机提示“android 正在启动”
5, apk对应的dex档被破坏/丢失，或OTA升级/APK/system Jar/包被更换与dex档不匹配
6, 手机down bin档前没有format data image
7,debug手段
 
[SOLUTION]
 一、 L版本上预置apk不正确，导致32位与64位兼容性问题
    （现象最多）预置apk的Android.mk配置不准确, 这会造成首次开机慢/android正在升级/apk报错class not found等异常，请重视！

1）、开机重新提取odex仅为arm的apk（说明此仅支持32位）：
I dex2oat : /system/bin/dex2oat --zip-fd=11 --zip-location=/system/app/***.apk --oat-fd=12 --oat-location=/data/dalvik-cache/arm/system@app@**@**.apk@classes.dex --instruction-set=arm --instruction-set-features=default --runtime-arg -Xms64m --runtime-arg -Xmx512m --swap-fd=13

      开机重新提取odex为arm的原因是：预编译时，按照“[FAQ13573]L版本首次开机慢”开启宏后系统默认提取的是64bit的odex，所以造成开机后这些apk被判别为32bit(即该apk仅支持32位)时需要重新提取odex。

【Solution】：在Android.mk中设定LOCAL_MULTILIB :=32，则预编译时会提取该apk的32bit的odex

2）、开机重新提取odex仅为arm64的apk(无lib库)：

I dex2oat : /system/bin/dex2oat --zip-fd=11 --zip-location=/system/app/***.apk --oat-fd=12 --oat-location=/data/dalvik-cache/arm64/system@app@**@**.apk@classes.dex --instruction-set=arm64 --instruction-set-features=default --runtime-arg -Xms64m --runtime-arg -Xmx512m --swap-fd=13 

     开机重新提取odex为arm64的原因是：这类apk应该是有源码的（例如AtciService），但是其Android.mk中有定义其为32bit。所以预编译时会把其当作32bit的来处理，生成的odex存放在arm下。但是因为这个apk是没有lib的，所以开机后PMS会将其作为64bit来处理，所以会去arm64下找dex文件，没找到就会重新提取。但是因为L版本在提取odex后会删除原本存储的dex文件，所以重新提取就找不到dex文件然后报错。

【Solution】：删除LOCAL_MULTILIB :=32或LOCAL_32_BIT_ONLY=true 


3）、开机重新提取odex既有arm又有arm64的apk：
【Solution】：在Android.mk中设定LOCAL_MULTILIB :=both，则预编译时会提取该apk的32bit和64bit的odex

4)、若存在解决不了的，可以对于这个apk的解决办法为预编译时跳过提取其的odex文件：
   \build\core\dex_preopt_odex_install.mk中添加：
    //mtk add begin
    ifeq ($(LOCAL_MODULE),MODULE_NAME)
    LOCAL_DEX_PREOPT:=
    endif
    //mtk add end

    built_odex:=
    installed_odex:=
    ....
    MODULE_NAME写为需要替换的apk的module name(注意添加位置、避免编译报错)
 
     那么现在有些apk因为报错（要么自身兼容问题，要么android.mk配置不对），采取预编译时跳过提取措施也是可以的，但这会增加了首次开机的些许时间(不宜添加过多)，即编译阶段不去提取odex，而是首次开机时区提取odex。

二、 如果您有重新push，再开机就会因为odex是旧的，导致重新提取。
      出现这种情况一般是系统中一些apk仍然需要提取odex文件，比如预编译了odex的apk，如果您有重新push，再开机就会因为odex是旧的，导致重新提取。注：L版本上不支持adb push，重启后才会生效。

三、 安装APK或开机过程中掉电

请避免拔电池操作（L1版本）

     Google在L1做了change, 开机时异常断电有机会造成file corruption (如果是某app的oat file corruption，会造成app无法启动)
所以Google设计一套方法，只要上一次是异常断电，下一次开机就”全部重建”ART optimization files(*.oat)，因此
1.      会显示Application is starting…
2.      重部重建oat file，所以开机时间会延长
【关键log】: Incomplete boot detected. Pruning dalvik cache 

四、L1版本上设置关机闹钟，闹钟响起时择暂停，按Power键开机提示“android 正在启动”
    如有碰到请至PactchManagerSystem系统申请Patch ID: ALPS02057885

注：如L1上"android正在启动"等同之前的"android正在升级" 

五、 apk对应的dex档被破坏/丢失，或OTA升级/APK/system Jar包被更换与dex档不匹配

六、  手机down bin档前没有format data image

七、[debug手段]：
总结打trace的方式，这样可以定位出当前这个提示是哪个地方的原因（适用于L1版本）。
首先，@PackageManagerService.java：
1.打开DEBUG_DEXOPT的开关
2.performBootDexOpt()添加trace（“//mtk”标记
public void performBootDexOpt() {
        enforceSystemOrRoot("Only the system can request dexopt be performed");

        // Before everything else, see whether we need to fstrim.
        try {
            IMountService ms = PackageHelper.getMountService();
            if (ms != null) {
                final boolean isUpgrade = isUpgrade();
                            Slog.d(TAG + "_Debug","isUpgrade = " + isUpgrade);//mtk
                boolean doTrim = isUpgrade;
                
                            ......
                            
                if (doTrim) {
                    if (!isFirstBoot()) {
                        try {
                                                 Slog.d(TAG + "_Debug","showBootMessage called1...");//mtk
                            ActivityManagerNative.getDefault().showBootMessage(
                                    mContext.getResources().getString(
                                            R.string.android_upgrading_fstrim), true);
                        } catch (RemoteException e) {
                        }
                   }
                    ms.runMaintenance();
                }
            } else {
                Slog.e(TAG, "Mount service unavailable!");
            }
        } catch (RemoteException e) {
            // Can't happen; MountService is local
        }

        final ArraySet<PackageParser.Package> pkgs;

3. performBootDexOpt(PackageParser.Package pkg, int curr, int total) 添加trace（“//mtk”标记
    private void performBootDexOpt(PackageParser.Package pkg, int curr, int total) {
        if (DEBUG_DEXOPT) {
            Log.i(TAG, "Optimizing app " + curr + " of " + total + ": " + pkg.packageName);
        }
        if (!isFirstBoot()) {
            try {
                            Slog.d(TAG + "_Debug","showBootMessage called2...");//mtk
                ActivityManagerNative.getDefault().showBootMessage(
                        mContext.getResources().getString(R.string.android_upgrading_apk,
                                curr, total), true);
            } catch (RemoteException e) {
            }
        }
其次，SystemServer.java中startOtherServices()添加如下trace（“//mtk”标记
        try {
            mPackageManagerService.performBootDexOpt();
        } catch (Throwable e) {
            reportWtf("performing boot dexopt", e);
        }

        try {
                     Slog.d("PackageManager" + "_Debug","showBootMessage called3...");//mtk
            ActivityManagerNative.getDefault().showBootMessage(
                    context.getResources().getText(
                            com.android.internal.R.string.android_upgrading_starting_apps),
                    false);
        } catch (RemoteException e) {
        }
再次，WindowManagerService.java中打开DEBUG_BOOT debug 开关

以上，总共是6个地方的改动。

 
[FAQ13573]L版本首次开机慢
[FAQ14105]L版本打开WITH_DEXPREOPT宏后首次开机仍慢
[FAQ13232]L 预置apk
[FAQ13697]L 版本如何将第三方so库打包到apk




 Android.mk详解
2013-07-29 18:09 43065人阅读 评论(4) 收藏 举报
 分类： Linux（58）   Android（19）  
Android.mk是Android提供的一种makefile文件，用来指定诸如编译生成so库名、引用的头文件目录、需要编译的.c/.cpp文件和.a静态库文件等。要掌握jni，就必须熟练掌握Android.mk的语法规范。 

一、Android.mk文件的用途 
一个android子项目中会存在一个或多个Android.mk文件 
1、单一的Android.mk文件 
直接参考NDK的sample目录下的hello-jni项目，在这个项目中只有一个Android.mk文件 
2、多个Android.mk文件 
如果需要编译的模块比较多，我们可能会将对应的模块放置在相应的目录中， 
这样，我们可以在每个目录中定义对应的Android.mk文件（类似于上面的写法）， 
最后，在根目录放置一个Android.mk文件，内容如下： 
include $(call all-subdir-makefiles) 
只需要这一行就可以了，它的作用就是包含所有子目录中的Android.mk文件 
3、多个模块共用一个Android.mk 
这个文件允许你将源文件组织成模块，这个模块中含有： 
  -静态库(.a文件) 
  -动态库(.so文件) 
只有共享库才能被安装/复制到您的应用软件（APK）包中 
include $(BUILD_STATIC_LIBRARY)，编译出的是静态库 
include $(BUILD_SHARED_LIBRARY)，编译出的是动态库 



二、自定义变量 
以下是在 Android.mk中依赖或定义的变量列表，可以定义其他变量为自己使用，但是NDK编译系统保留下列变量名： 
-以 LOCAL_开头的名字（例如 LOCAL_MODULE） 
-以 PRIVATE_, NDK_ 或 APP_开头的名字（内部使用） 
-小写名字（内部使用，例如‘my-dir’） 
  如果为了方便在 Android.mk 中定义自己的变量，建议使用 MY_前缀，一个小例子： 
MY_SOURCES := foo.c 
ifneq ($(MY_CONFIG_BAR),) 
MY_SOURCES += bar.c 
endif 
LOCAL_SRC_FILES += $(MY_SOURCES) 
注意：‘:=’是赋值的意思；'+='是追加的意思；‘$’表示引用某变量的值。 



三、GNU Make系统变量 
  这些 GNU Make变量在你的 Android.mk 文件解析之前，就由编译系统定义好了。注意在某些情况下，NDK可能分析 Android.mk 几次，每一次某些变量的定义会有不同。 
  （1）CLEAR_VARS:  指向一个编译脚本，几乎所有未定义的 LOCAL_XXX 变量都在"Module-description"节中列出。必须在开始一个新模块之前包含这个脚本：include$(CLEAR_VARS)，用于重置除LOCAL_PATH变量外的，所有LOCAL_XXX系列变量。 
  （2）BUILD_SHARED_LIBRARY:  指向编译脚本，根据所有的在 LOCAL_XXX 变量把列出的源代码文件编译成一个共享库。 
       注意，必须至少在包含这个文件之前定义 LOCAL_MODULE 和 LOCAL_SRC_FILES。 
  （3）BUILD_STATIC_LIBRARY:  一个 BUILD_SHARED_LIBRARY 变量用于编译一个静态库。静态库不会复制到的APK包中，但是能够用于编译共享库。 
       示例：include $(BUILD_STATIC_LIBRARY) 
       注意，这将会生成一个名为 lib$(LOCAL_MODULE).a 的文件 
  （4）TARGET_ARCH: 目标 CPU平台的名字 
  （5）TARGET_PLATFORM: Android.mk 解析的时候，目标 Android 平台的名字.详情可考/development/ndk/docs/stable- apis.txt. 
       android-3 -> Official Android 1.5 system images 
       android-4 -> Official Android 1.6 system images 
       android-5 -> Official Android 2.0 system images 
  （6）TARGET_ARCH_ABI:  暂时只支持两个 value，armeabi 和 armeabi-v7a。。 
  （7）TARGET_ABI: 目标平台和 ABI 的组合， 

                               
四、模块描述变量 
  下面的变量用于向编译系统描述你的模块。应该定义在'include  $(CLEAR_VARS)'和'include $(BUILD_XXXXX)'之间。$(CLEAR_VARS)是一个脚本，清除所有这些变量。 
  （1）LOCAL_PATH:  这个变量用于给出当前文件的路径。 
       必须在 Android.mk 的开头定义，可以这样使用：LOCAL_PATH := $(call my-dir) 
       如当前目录下有个文件夹名称 src，则可以这样写 $(call src)，那么就会得到 src 目录的完整路径 
       这个变量不会被$(CLEAR_VARS)清除，因此每个 Android.mk 只需要定义一次(即使在一个文件中定义了几个模块的情况下)。 
  （2）LOCAL_MODULE: 这是模块的名字，它必须是唯一的，而且不能包含空格。 
       必须在包含任一的$(BUILD_XXXX)脚本之前定义它。模块的名字决定了生成文件的名字。 
  （3）LOCAL_SRC_FILES:  这是要编译的源代码文件列表。 
       只要列出要传递给编译器的文件，因为编译系统自动计算依赖。注意源代码文件名称都是相对于 LOCAL_PATH的，你可以使用路径部分，例如： 
        LOCAL_SRC_FILES := foo.c toto/bar.c\ 
        Hello.c 
       文件之间可以用空格或Tab键进行分割,换行请用"\" 
       如果是追加源代码文件的话，请用LOCAL_SRC_FILES += 
       注意：可以LOCAL_SRC_FILES := $(call all-subdir-java-files)这种形式来包含local_path目录下的所有java文件。 
  （4）LOCAL_C_INCLUDES:  可选变量，表示头文件的搜索路径。 
        默认的头文件的搜索路径是LOCAL_PATH目录。 
  （5）LOCAL_STATIC_LIBRARIES: 表示该模块需要使用哪些静态库，以便在编译时进行链接。 
  （6）LOCAL_SHARED_LIBRARIES:  表示模块在运行时要依赖的共享库（动态库），在链接时就需要，以便在生成文件时嵌入其相应的信息。 
       注意：它不会附加列出的模块到编译图，也就是仍然需要在Application.mk 中把它们添加到程序要求的模块中。 
  （7）LOCAL_LDLIBS:  编译模块时要使用的附加的链接器选项。这对于使用‘-l’前缀传递指定库的名字是有用的。 
       例如，LOCAL_LDLIBS := -lz表示告诉链接器生成的模块要在加载时刻链接到/system/lib/libz.so 
       可查看 docs/STABLE-APIS.TXT 获取使用 NDK发行版能链接到的开放的系统库列表。 
   (8)LOCAL_MODULE_PATH 和 LOCAL_UNSTRIPPED_PATH 
       在 Android.mk 文件中， 还可以用LOCAL_MODULE_PATH 和LOCAL_UNSTRIPPED_PATH指定最后的目标安装路径. 
       不同的文件系统路径用以下的宏进行选择： 
       TARGET_ROOT_OUT：表示根文件系统。 
       TARGET_OUT：表示 system文件系统。 
       TARGET_OUT_DATA：表示 data文件系统。 
       用法如：LOCAL_MODULE_PATH :=$(TARGET_ROOT_OUT) 
       至于LOCAL_MODULE_PATH 和LOCAL_UNSTRIPPED_PATH的区别，暂时还不清楚。 
   （9）LOCAL_JNI_SHARED_LIBRARIES：定义了要包含的so库文件的名字，如果程序没有采用jni，不需要 
        LOCAL_JNI_SHARED_LIBRARIES := libxxx 这样在编译的时候，NDK自动会把这个libxxx打包进apk； 放在youapk/lib/目录下 



五、NDK提供的函数宏 
GNU Make函数宏，必须通过使用'$(call  )'来调用，返回值是文本化的信息。 
   （1）my-dir:返回当前 Android.mk 所在的目录的路径，相对于 NDK 编译系统的顶层。这是有用的，在 Android.mk 文件的开头如此定义： 
        LOCAL_PATH := $(call my-dir) 
   （2）all-subdir-makefiles: 返回一个位于当前'my-dir'路径的子目录中的所有Android.mk的列表。 
       例如，某一子项目的目录层次如下： 
            src/foo/Android.mk 
            src/foo/lib1/Android.mk 
            src/foo/lib2/Android.mk 
      如果 src/foo/Android.mk 包含一行： 
           include $(call all-subdir-makefiles) 
      那么它就会自动包含 src/foo/lib1/Android.mk 和 src/foo/lib2/Android.mk。 
      这项功能用于向编译系统提供深层次嵌套的代码目录层次。 
      注意，在默认情况下，NDK 将会只搜索在 src/*/Android.mk 中的文件。 
   （3）this-makefile:  返回当前Makefile 的路径(即这个函数调用的地方) 
   （4）parent-makefile:  返回调用树中父 Makefile 路径。即包含当前Makefile的Makefile 路径。 
   （5）grand-parent-makefile：返回调用树中父Makefile的父Makefile的路径 



六、 Android.mk示例 
Java代码  收藏代码
#编译静态库  
LOCAL_PATH := $(call my-dir)  
include $(CLEAR_VARS)  
LOCAL_MODULE = libhellos  
LOCAL_CFLAGS = $(L_CFLAGS)  
LOCAL_SRC_FILES = hellos.c  
LOCAL_C_INCLUDES = $(INCLUDES)  
LOCAL_SHARED_LIBRARIES := libcutils  
LOCAL_COPY_HEADERS_TO := libhellos  
LOCAL_COPY_HEADERS := hellos.h  
include $(BUILD_STATIC_LIBRARY)  
  
#编译动态库  
LOCAL_PATH := $(call my-dir)  
include $(CLEAR_VARS)  
LOCAL_MODULE = libhellod  
LOCAL_CFLAGS = $(L_CFLAGS)  
LOCAL_SRC_FILES = hellod.c  
LOCAL_C_INCLUDES = $(INCLUDES)  
LOCAL_SHARED_LIBRARIES := libcutils  
LOCAL_COPY_HEADERS_TO := libhellod  
LOCAL_COPY_HEADERS := hellod.h  
include $(BUILD_SHARED_LIBRARY)  
  
#使用静态库  
LOCAL_PATH := $(call my-dir)  
include $(CLEAR_VARS)  
LOCAL_MODULE := hellos  
LOCAL_STATIC_LIBRARIES := libhellos  
LOCAL_SHARED_LIBRARIES :=  
LOCAL_LDLIBS += -ldl  
LOCAL_CFLAGS := $(L_CFLAGS)  
LOCAL_SRC_FILES := mains.c  
LOCAL_C_INCLUDES := $(INCLUDES)  
include $(BUILD_EXECUTABLE)  
  
#使用动态库  
LOCAL_PATH := $(call my-dir)  
include $(CLEAR_VARS)  
LOCAL_MODULE := hellod  
LOCAL_MODULE_TAGS := debug  
LOCAL_SHARED_LIBRARIES := libc libcutils libhellod  
LOCAL_LDLIBS += -ldl  
LOCAL_CFLAGS := $(L_CFLAGS)  
LOCAL_SRC_FILES := maind.c  
LOCAL_C_INCLUDES := $(INCLUDES)  
include $(BUILD_EXECUTABLE) 